AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway REST API -> Lambda -> SQS (ingest).

Parameters:
  Prefix:
    Type: String
    Default: dmc
    AllowedPattern: '^[a-z0-9-]+$'
    Description: Name prefix
  QueueUrl:
    Type: String
    Description: SQS queue URL
  QueueArn:
    Type: String
    Description: SQS queue ARN

Resources:
  IngestRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Prefix}-ingest-role-${AWS::Region}-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SendToSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !Ref QueueArn

  IngestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Prefix}-ingest-api'
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt IngestRole.Arn
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueUrl
      Code:
        ZipFile: |
          import os, json, boto3
          sqs = boto3.client('sqs')
          QURL = os.environ['QUEUE_URL']
          def handler(event, context):
              try:
                  body = event.get('body') or "{}"
                  # If base64 encoded (API GW), decode
                  if event.get('isBase64Encoded'):
                      import base64
                      body = base64.b64decode(body).decode('utf-8')
                  data = json.loads(body)
              except Exception:
                  data = {"raw": event.get('body')}

              sqs.send_message(QueueUrl=QURL, MessageBody=json.dumps(data))
              return {
                  "statusCode": 200,
                  "headers": {"Content-Type": "application/json"},
                  "body": json.dumps({"status": "queued"})
              }

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Prefix}-ingest-api'

  IngestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: ingest

  IngestMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref IngestResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IngestLambda.Arn}/invocations'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: IngestMethodPost
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod

  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IngestLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/ingest'

Outputs:
  ApiUrlOut:
    Description: Invoke URL for POST
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/ingest'
